import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
df['Gender'] = df['Gender'].fillna(df['Gender'].mode()[0])
df['Married'] = df['Married'].fillna(df['Married'].mode()[0])
df['Dependents'] = df['Dependents'].fillna(df['Dependents'].mode()[0])
df['Self_Employed'] = df['Self_Employed'].fillna(df['Self_Employed'].mode()[0])
df['Credit_History'] = df['Credit_History'].fillna(df['Credit_History'].mode()[0])
df['LoanAmount'].fillna(df['LoanAmount'].median())
df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0])
df['Dependents'] = df['Dependents'].replace('3+', 3).astype(float)
df['Credit_History'] = df['Credit_History'].astype(int)
df['Total_Income'] = df['ApplicantIncome'] + df['CoapplicantIncome']
df.dropna(inplace=True)
df['Income_to_Debt_Ratio'] = (df['ApplicantIncome'] + df['CoapplicantIncome']) / df['LoanAmount']
df['Income_to_Debt_Ratio'].head()
categorical_vars = ['Gender', 'Education', 'Married', 'Self_Employed', 'Credit_History', 'Property_Area']
for var in categorical_vars:
plt.figure(figsize=(8, 5))
sns.countplot(x=var, hue='Loan_Status', data=df, palette='Set2')
plt.title(f'Loan Approval Status by {var}')
plt.xlabel(var)
plt.ylabel('Count')
plt.legend(title='Loan Status', labels=['Not Approved', 'Approved'])
plt.show()

# Calculate approval ratio for each category in the variable
approval_ratio = df.groupby(var)['Loan_Status'].value_counts(normalize=True).unstack()
print(f"Loan Approval Ratio for {var}:\n", approval_ratio, "\n")
label_encoders = {}
categorical_vars = ['Gender', 'Education', 'Married', 'Self_Employed', 'Credit_History', 'Property_Area']
for var in categorical_vars:
le = LabelEncoder()
df[var] = le.fit_transform(df[var])
label_encoders[var] = le

df['Loan_Status'] = df['Loan_Status'].map({'N': 0, 'Y': 1}) # Encode target variable

# Define features and target
X = df[['Credit_History','Income_to_Debt_Ratio']]
y = df['Loan_Status']

# Standardize features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Logistic Regression model
log_model = LogisticRegression()
log_model.fit(X_train, y_train)

# Train Random Forest model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Make predictions
y_pred_log = log_model.predict(X_test)
y_pred_rf = rf_model.predict(X_test)
accuracy_log = accuracy_score(y_test, y_pred_log)
accuracy_rf = accuracy_score(y_test, y_pred_rf)

print(f"Logistic Regression Accuracy: {accuracy_log:.4f}")
print("Logistic Regression Classification Report:\n", classification_report(y_test, y_pred_log, zero_division=1))

print(f"Random Forest Accuracy: {accuracy_rf:.4f}")
print("Random Forest Classification Report:\n", classification_report(y_test, y_pred_rf, zero_division=1))